// app/page.js
'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/navigation';

// Import Child Components (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
import QuizGate from './components/QuizGate';
import StoryFlow from './components/StoryFlow';
import GiftBoxDisplay from './components/GiftBoxDisplay';
import BirthdayCardDisplay from './components/BirthdayCardDisplay';

// --- DATA CONSTANTS ---
const FRIEND_NAME = "‡∏´‡∏¢‡∏Å";
const YOUR_NAME = "‡∏£‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå";

// <<<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏ß‡∏° .mp3) >>>>
const PRE_QUIZ_AND_QUIZ_SONG = "/audio/song0.mp3";
const INTRO_STORY_SONG = "/audio/song1.mp3";
const GIFT_SONG = "/audio/song2.mp3"; // ‡πÄ‡∏û‡∏•‡∏á/‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
const CARD_SONG = "/audio/song3.mp3"; // ‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î

const storyContentsData = [
    {
        id: 'story-prologue-start',
        title: "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°...",
        image: null,
        text: `  ‡πÄ‡∏≠‡∏≤‡∏•‡πà‡∏∞! ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!`,
        isPrologue: true,
        hasMusicButton: true, // Prologue ‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á Intro
        reveal: null
    },
    {
        id: 'story-1',
        title: "‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤...",
        image: "/picture/pic1.jpg",
        text: `  ‡∏ñ‡∏∂‡∏á‡∏´‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å

‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠ 2 ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏õ‡∏µ 1 ‡πÉ‡∏´‡∏°‡πà‡πÜ
‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏Ç‡∏≠‡∏á‡∏°‡∏≠
‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡πÑ‡∏õ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏î‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏Å‡∏°‡∏≤‡πÄ‡∏°‡∏Ñ‡πÄ‡∏ü‡∏£‡∏ô 
‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏≤ üè∏üòä`,
        reveal: null
    },
    {
        id: 'story-1b',
        title: "‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤...",
        image: "/picture/pic1.jpg", 
        text: `  ‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏µ 1 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏î ‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
‡πÑ‡∏î‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏Å‡∏û‡∏≤‡πÑ‡∏õ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà Central World ‡πÑ‡∏õ‡∏î‡∏π PUN
‡∏°‡∏±‡∏ô‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÜ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÜ
‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÜ `,
        reveal: null
    },
    {
        id: 'story-2',
        title: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏¢‡∏Å‡∏ó‡∏≤‡∏á...",
        image: "/picture/pic2.jpg",
        text: `  ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ 2 ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏¢‡∏Å‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ô
‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏Ñ‡∏≠‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏¢‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏†‡∏™‡∏±‡∏ä
‡∏ï‡πà‡∏≤‡∏á‡∏Ñ‡∏ô‡∏Å‡πá‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡∏°‡∏µ‡∏™‡∏≠‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡πà‡∏á‡∏ß‡∏∏‡πà‡∏ô‡∏ß‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤

‡πÅ‡∏°‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô ‡∏°‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°`,
        reveal: {
            buttonTextPart1: "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°...",
            buttonText: "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î... üíå",
            content: "<p>‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô ‡∏£‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠<br>‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß ü§´üì∏</p><img src='/picture/pic4.jpg' alt='‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏ß‡πâ' class='secret-image-js' />"
        }
    },
    {
        id: 'story-2b',
        title: "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ...",
        image: "/picture/pic3.jpg",
        text: `  ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏Ñ‡∏≠‡∏°‡∏Å‡πá‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
‡πÅ‡∏ï‡πà ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏±‡∏ô
‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏ß‡∏ô‡πÑ‡∏õ‡∏ï‡∏µ‡πÄ‡πÄ‡∏ö‡∏î‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏Å‡∏•‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢`,
        reveal: null
    },
    {
        id: 'story-3',
        title: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á...",
        image: "/picture/pic3.jpg",
        text: `  ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏´‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ...
‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ 
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥
‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô

‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤... ‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏™‡∏°‡∏≠ üíô`,
        reveal: null
    },
    {
        id: 'story-4',
        title: "...",
        image: null,
        text: `  ‡∏ô‡∏≤‡∏ô‡πÜ ‡∏ó‡∏µ‡πÄ‡∏£‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ ‡∏°‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏¢‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡πÄ‡πÄ‡∏•‡∏∞‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠`,
        reveal: {
            buttonTextPart1: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©...",
            buttonText: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡πÉ‡∏à... üíù",
            content: "<p style='text-align: center; font-size: 1.1em; color: #ff6b9d;'><br>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏î‡∏µ‡πÜ<br>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô<br><br>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡πÉ‡∏à</p>"
        }
    }
];

const quizQuestionText = `${FRIEND_NAME}‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏ì‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?`;
const quizOptionsData = [
    { text: "‡∏Å. ‡∏Ñ‡∏ì‡∏∞‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö", value: "‡∏Ñ‡∏ì‡∏∞‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö" },
    { text: "‡∏Ç. ‡∏Ñ‡∏ì‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥", value: "‡∏Ñ‡∏ì‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥" },
    { text: "‡∏Ñ. ‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏•‡∏Å", value: "‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏•‡∏Å" },
    { text: "‡∏á. ‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", value: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå" }
];
const quizCorrectAnswerValue = "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå";
const WISH_TEXT = `‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏∏‡∏î‡πÜ<br>
‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡∏ô‡∏∞<br>
‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏Ñ‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á<br>
‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡∏Ñ‡∏ô‡∏î‡∏µ‡πÜ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ‡πÜ ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ ‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï<br>
‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏¢‡πà‡πÜ ‡∏Å‡πá‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ô‡∏∞5555<br>
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠ <br>
‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ :)<br>
‡∏£‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠‚ù§Ô∏è`;

// --- END DATA CONSTANTS ---

export default function BirthdayPage() {
    const [currentStage, setCurrentStage] = useState('preQuiz'); // ‡∏´‡∏£‡∏∑‡∏≠ 'quiz' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ preQuiz
    const [giftPageTimeoutId, setGiftPageTimeoutId] = useState(null);
    const [isGiftClicked, setIsGiftClicked] = useState(false);
    const [isGiftBoxOpeningProcess, setIsGiftBoxOpeningProcess] = useState(false);


    const audioRef = useRef(null);
    const router = useRouter();

    const clearGiftTimeout = useCallback(() => {
        if (giftPageTimeoutId) {
            clearTimeout(giftPageTimeoutId);
            setGiftPageTimeoutId(null);
        }
    }, [giftPageTimeoutId]);

    const playMusic = useCallback((newSrc, volume = 0.7, loop = true) => {
        if (audioRef.current) {
            const currentAudioSrcPath = audioRef.current.src ? audioRef.current.src.replace(window.location.origin, '') : null;
            if (currentAudioSrcPath !== newSrc || audioRef.current.paused) {
                console.log(`Audio: Setting src to ${newSrc} and attempting to play (loop: ${loop}).`);
                audioRef.current.src = newSrc;
                audioRef.current.loop = loop;
                audioRef.current.load();
                const playPromise = audioRef.current.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        audioRef.current.volume = volume;
                        console.log(`Audio: Now playing ${newSrc}`);
                    }).catch(error => {
                        console.warn(`Audio: Autoplay prevented for ${newSrc}:`, error);
                    });
                }
            } else if (currentAudioSrcPath === newSrc) {
                audioRef.current.volume = volume; // Adjust volume if same song is playing
                console.log(`Audio: Adjusted volume for already playing ${newSrc}`);
            }
        }
    }, []);

    const pauseMusic = useCallback(() => {
        if (audioRef.current && !audioRef.current.paused) {
            audioRef.current.pause();
            console.log(`Audio: Paused ${audioRef.current.src}`);
        }
    }, []);

    useEffect(() => {
        console.log("Stage changed to:", currentStage);
        // Music management that happens automatically when a stage loads
        // Excludes music triggered by specific interactions like clicking the gift box
        if (currentStage === 'preQuiz' || currentStage === 'quiz') {
            playMusic(PRE_QUIZ_AND_QUIZ_SONG, 0.6, true);
        } else if (currentStage === 'intro') {
            // If Quiz song was playing and it's different from Intro song, pause it.
            // Intro song itself is started by a button click in StoryFlow/Prologue.
            if (audioRef.current &&
                audioRef.current.src.includes(PRE_QUIZ_AND_QUIZ_SONG.substring(1)) &&
                PRE_QUIZ_AND_QUIZ_SONG !== INTRO_STORY_SONG) {
                pauseMusic();
            }
        } else if (currentStage === 'card') {
            // This logic will play CARD_SONG when card stage is entered
            // It assumes any previous song (like GIFT_SONG) should be stopped.
            if (CARD_SONG) {
                 // Ensure GIFT_SONG is paused if it was playing and is different
                if (GIFT_SONG && audioRef.current && audioRef.current.src.includes(GIFT_SONG.substring(1)) && GIFT_SONG !== CARD_SONG) {
                    pauseMusic();
                }
                playMusic(CARD_SONG, 0.7, true);
            } else if (GIFT_SONG && audioRef.current && audioRef.current.src.includes(GIFT_SONG.substring(1))) {
                // If no CARD_SONG, but GIFT_SONG was playing, continue it or adjust volume
                if(audioRef.current) audioRef.current.volume = 0.5;
            }
            // (Else, if no card song and no gift song, music might have been paused from 'gift' stage)
        }
        // Note: Music for 'gift' stage is handled differently (on click, or silence after intro)

    }, [currentStage, playMusic, pauseMusic]);


    const handleProceedToQuiz = () => setCurrentStage('quiz');
    const handleQuizCorrect = () => setCurrentStage('intro');
    const handleQuizIncorrect = () => { pauseMusic(); router.push('/imposter'); };

    const handleStartStoryMusic = () => { // Called from StoryFlow (e.g., Prologue button)
        console.log("Request to start INTRO_STORY_SONG from StoryFlow");
        playMusic(INTRO_STORY_SONG, 0.7, true);
    };

    const handleAllStoriesDone = () => { // Called when "‡πÑ‡∏õ‡∏î‡∏π‡∏Ñ‡∏≥‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏Å‡∏±‡∏ô!" is clicked
        console.log("All stories done. Pausing current music (Intro song) and going to gift stage.");
        pauseMusic(); // <<<< ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á Intro ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setCurrentStage('gift');
        setIsGiftClicked(false);
        setIsGiftBoxOpeningProcess(false); // Reset this state
        const timerId = setTimeout(() => {
            if (!isGiftClicked && currentStage === 'gift') {
                clearGiftTimeout();
                setCurrentStage('card'); // If time's up, go to card (useEffect for 'card' will handle music)
            }
        }, 10000); // 10 seconds timeout for gift interaction
        setGiftPageTimeoutId(timerId);
    };

    const handleGiftBoxInteractionStart = () => { // Called when gift box is clicked
        clearGiftTimeout();
        setIsGiftClicked(true);
        setIsGiftBoxOpeningProcess(true); // To trigger .opened class in GiftBoxDisplay CSS

        console.log("Gift box clicked. Playing GIFT_SONG (if defined).");
        if (GIFT_SONG) {
            playMusic(GIFT_SONG, 0.6, false); // Play gift opening sound/music (non-looping if it's an effect)
        } else {
            // If no specific gift song, ensure other music is paused.
            // (It should have been paused when entering 'gift' stage if INTRO_STORY_SONG was playing)
        }
    };

    const handleGiftAnimationFinished = () => { // Called after CSS animation of gift box opening
        console.log("GiftBoxDisplay reported opening animation finished.");
        // GIFT_SONG (if short effect) might have finished.
        // If GIFT_SONG is a BGM, it might still be playing.
        // The useEffect for currentStage === 'card' will handle CARD_SONG.

        setTimeout(() => {
            if (isGiftClicked) { // Proceed only if user initiated
                setCurrentStage('card');
            }
        }, 500); // Short delay before transitioning to card, allows GIFT_SONG to finish if very short
    };

    useEffect(() => { // Gift timeout cleanup
        if (currentStage !== 'gift') {
            clearGiftTimeout();
        }
        return clearGiftTimeout;
    }, [currentStage, clearGiftTimeout]);

    let pageContent = null;
    // --- RENDER LOGIC ---
    switch (currentStage) {
        case 'preQuiz':
            pageContent = (
                <div className="page-stage-wrapper pre-quiz-wrapper animate__animated animate__fadeIn">
                    <div className="pre-quiz-content-box animate__animated animate__zoomIn">
                        <h1 className="pre-quiz-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°!</h1>
                        <p className="pre-quiz-text">
                            ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏≥‡∏î‡∏¥‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥<br/>
                            ‡∏°‡∏µ‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡πá‡∏Å‡πÜ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà...
                        </p>
                        <p className="pre-quiz-subtext">
                            (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å555555 üòâ)
                        </p>
                        <button
                            onClick={handleProceedToQuiz}
                            className="pre-quiz-button animate__animated animate__pulse animate__infinite"
                        >
                            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö! ‚Üí
                        </button>
                    </div>
                </div>
            );
            break;
        case 'quiz':
            pageContent = (
                <QuizGate
                    question={quizQuestionText}
                    options={quizOptionsData}
                    correctAnswer={quizCorrectAnswerValue}
                    onCorrect={handleQuizCorrect}
                    onIncorrect={handleQuizIncorrect}
                    friendName={FRIEND_NAME}
                    initialAnimation="animate__animated animate__fadeIn"
                />
            );
            break;
        case 'intro':
            pageContent = (
                <StoryFlow
                    stories={storyContentsData}
                    onStartMusic={handleStartStoryMusic}
                    onAllStoriesDone={handleAllStoriesDone}
                    initialAnimationClass="animate__animated animate__fadeIn"
                />
            );
            break;
        case 'gift':
            pageContent = (
                <GiftBoxDisplay
                    onGiftClick={handleGiftBoxInteractionStart}
                    onGiftOpened={handleGiftAnimationFinished}
                    initialAnimation="animate__animated animate__fadeIn"
                    // Pass isOpening prop if GiftBoxDisplay needs to trigger CSS animation via class
                    isOpening={isGiftBoxOpeningProcess}
                />
            );
            break;
        case 'card':
            pageContent = (
                <BirthdayCardDisplay
                    friendName={FRIEND_NAME}
                    yourName={YOUR_NAME}
                    wishText={WISH_TEXT}
                    animationClass="animate__animated animate__fadeIn"
                    cardSpecificAnimation="animate__animated animate__jackInTheBox"
                />
            );
            break;
        default:
            pageContent = <div>Loading...</div>;
    }

    return (
        <>
            <Head>
                <title>‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏∞‡∏´‡∏¢‡∏Å!</title>
                <meta name="description" content={`‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${FRIEND_NAME}`} />
            </Head>
            <audio ref={audioRef} preload="auto" /> {/* loop is now controlled by playMusic */}
            {pageContent}
        </>
    );
}